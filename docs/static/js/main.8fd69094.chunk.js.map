{"version":3,"sources":["components/CategoryAdder.js","components/GifsGridItem.js","helpers/getGifs.js","components/GifsGrid.js","hooks/useFetchGifs.js","GifSearcherApp.js","index.js"],"names":["CategoryAdder","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","previousCategories","window","alert","type","placeholder","value","onChange","e","target","GifsGridItem","id","title","url","className","src","alt","getGifs","category","a","apiUrl","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifsGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifSearcherApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACdC,mBAAS,IADK,mBAC3CC,EAD2C,KAC/BC,EAD+B,KAkBlD,OACE,0BAAMC,SAhBa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OACZP,EAAWK,QADC,mBAETE,OAGLN,EAAc,KAEdO,OAAOC,MAAM,+BAMb,2BACEC,KAAK,OACLC,YAAY,uBACZC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAca,EAAEC,OAAOH,UAG1C,4BAAQF,KAAK,UAAb,sBC5BOM,EAAe,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACxC,OACE,yBAAKC,UAAU,kDACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,GAAK,2B,uBCNFK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACoCC,UACvDH,GAFmB,8DAKHI,MAAMF,GALH,cAKfG,EALe,gBAMEA,EAAIC,OANN,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAZjB,kBAgBda,GAhBc,4CAAH,sDCIPK,EAAW,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EACdzB,mBAAS,CAAEgC,KAAM,GAAIO,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAWxC,OARAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CAAET,KAAMY,EAAML,SAAS,MAC/B,UAEJ,CAACd,IAEGe,EDTyBM,CAAarB,GAA/BmB,EAD0B,EAChCZ,KAAYO,EADoB,EACpBA,QAEpB,OACE,oCACE,wBAAIlB,UAAU,mDACXI,GAEFc,GACC,uBAAGlB,UAAU,oCAAb,uBAGA,yBAAKA,UAAU,aACZuB,EAAKV,KAAI,SAACC,GACT,OAAO,kBAAC,EAAD,eAAcY,IAAKZ,EAAIjB,IAAQiB,UECnCa,MAff,WAA2B,IAAD,EACYhD,mBAAS,CAAC,YADtB,mBACjBiD,EADiB,KACLlD,EADK,KAGxB,OACE,oCACE,8CACA,6BACA,kBAAC,EAAD,CAAeA,cAAeA,IAC7BkD,EAAWf,KAAI,SAACT,GACf,OAAO,kBAAC,EAAD,CAAUsB,IAAKtB,EAAUA,SAAUA,S,MCRlDyB,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,U","file":"static/js/main.8fd69094.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CategoryAdder = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((previousCategories) => [\r\n        inputValue.trim(),\r\n        ...previousCategories,\r\n      ]);\r\n\r\n      setInputValue(\"\");\r\n    } else {\r\n      window.alert(\"You must add a valid name\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"e.j. Hunter X Hunter\"\r\n        value={inputValue}\r\n        onChange={(e) => setInputValue(e.target.value)}\r\n      />\r\n\r\n      <button type=\"submit\">Add new category</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nCategoryAdder.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifsGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"gif-card animate__animated animate__fadeInLeft\">\r\n      <img src={url} alt={title} />\r\n      <p>{title ? title : `No title for this GIF`}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const getGifs = async (category) => {\r\n  const apiUrl = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=5&api_key=GeBfPnJoxzniQLT6fv9Qgb26cMD9oOGq`;\r\n\r\n  const res = await fetch(apiUrl);\r\n  const { data } = await res.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\nimport { GifsGridItem } from \"./GifsGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifsGrid = ({ category }) => {\r\n  const { data: imgs, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"category-name animate__animated animate__fadeIn\">\r\n        {category}\r\n      </h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">\"Loading images...\"</p>\r\n      )}\r\n      {\r\n        <div className=\"card-grid\">\r\n          {imgs.map((img) => {\r\n            return <GifsGridItem key={img.id} {...img} />;\r\n          })}\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({ data: imgs, loading: false });\r\n      }, 2000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { CategoryAdder } from \"./components/CategoryAdder\";\r\nimport { GifsGrid } from \"./components/GifsGrid\";\r\n\r\nfunction GifSearcherApp() {\r\n  const [categories, setCategories] = useState([\"Berserk\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifSearcherApp</h2>\r\n      <hr />\r\n      <CategoryAdder setCategories={setCategories} />\r\n      {categories.map((category) => {\r\n        return <GifsGrid key={category} category={category} />;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifSearcherApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifSearcherApp from \"./GifSearcherApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifSearcherApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}